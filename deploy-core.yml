

#trigger:
#- master

pool:
  vmImage: ubuntu-latest

variables:
  buidConfiguration: 'Release'
  - name: environment
    value: 'Development'  # Valor predeterminado

stages:
- stage: Build
  jobs:
  - job: Build
    variables:
      - name: environment
        value: $[ 
          eq(variables['Build.SourceBranch'], 'refs/heads/master') ? 'Production' :
          eq(variables['Build.SourceBranch'], 'refs/heads/staging') ? 'Staging' : 
          variables['environment'] 
        ]

steps:
#- script: |
  #   echo version de ubuntu
   #  lsb_release -a
   #  cd $(System.DefaultWorkingDirectory)/Services/SolutionCore.API/src/API
   #  echo directorio
   #  pwd
    # ls -la
- script: echo "Current Environment: $(environment)"

- task: DotNetCoreCLI@2
  displayName: 'compilacion'
  inputs:
    command: 'build'
    projects: '$(System.DefaultWorkingDirectory)/Services/SolutionCore.API/src/API/**/*.csproj'
    arguments:  '--configuration Release'  
    workingDirectory: 'Services/SolutionCore.API/src/API'
  
- task: DotNetCoreCLI@2
  displayName: 'publicacion'
  inputs:
    command: 'publish'
    publishWebProjects: false
    workingDirectory: '$(System.DefaultWorkingDirectory)/Services/SolutionCore.API/src/API/'
    arguments:  '--configuration $(buidConfiguration)  --output $(Build.ArtifactStagingDirectory) /p:EnvironmentName=Development'  
    zipAfterPublish: false
  
  #guarda el artefacto para el release
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
   
    