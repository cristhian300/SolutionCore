
#trigger:
#- master

pool:
  vmImage: ubuntu-latest

variables:
    
  buidConfiguration: 'Release'   
  environment : 'Development'
  


 
 #echo ${{ variables.one }} # outputs initialValue
 
 
steps:
- task: PowerShell@2
  displayName: 'Set environment Production'
  condition:  eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    targetType: 'inline'
    script: |
      echo "##vso[task.setvariable variable=environment]Production"
      echo $(environment)
- task: PowerShell@2
  displayName: 'Set environment Development'
  condition:  eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  inputs:
    targetType: 'inline'
    script: |
      echo "##vso[task.setvariable variable=environment]Development" 
      echo $(environment)
 

#- script: |
  #   echo version de ubuntu
   #  lsb_release -a
   #  cd $(System.DefaultWorkingDirectory)/Services/SolutionCore.API/src/API
   #  echo directorio
   #  pwd
    # ls -la


# - task: DotNetCoreCLI@2
#   displayName: 'compilacion'
#   inputs:
#     command: 'build'
#     projects: '$(System.DefaultWorkingDirectory)/Services/SolutionCore.API/src/API/**/*.csproj'
#     arguments:  '--configuration Release'  
#     workingDirectory: 'Services/SolutionCore.API/src/API'
  
# - task: DotNetCoreCLI@2
#   displayName: 'publicacion'
#   inputs:
#     command: 'publish'
#     publishWebProjects: false
#     workingDirectory: '$(System.DefaultWorkingDirectory)/Services/SolutionCore.API/src/API/'
 
#     arguments:  '--configuration $(buidConfiguration)  --output $(Build.ArtifactStagingDirectory) /p:EnvironmentName=Development'  

#     zipAfterPublish: false
  
#   #guarda el artefacto para el release
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop'